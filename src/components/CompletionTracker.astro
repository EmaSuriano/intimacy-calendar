---
// This component provides client-side localStorage functionality for tracking completed days
---

<script>
  import confetti from 'canvas-confetti';

  // Type declarations
  interface CompletionTracker {
    STORAGE_KEY: string;
    getCompletedDays(): number[];
    isDayCompleted(dayNumber: number): boolean;
    markDayCompleted(dayNumber: number): boolean;
    markDayIncomplete(dayNumber: number): boolean;
    toggleDayCompletion(dayNumber: number): boolean;
    getStats(): { completed: number; total: number; percentage: number };
    updateUI(): void;
    triggerConfetti(): void;
  }

  declare global {
    interface Window {
      completionTracker: CompletionTracker;
    }
  }

  // Utility functions for managing completed days in localStorage
  window.completionTracker = {
    STORAGE_KEY: 'intimacy-calendar-completed',

    // Get all completed days
    getCompletedDays() {
      try {
        const stored = localStorage.getItem(this.STORAGE_KEY);
        return stored ? JSON.parse(stored) : [];
      } catch (error) {
        console.error('Error reading completed days from localStorage:', error);
        return [];
      }
    },

    // Check if a day is completed
    isDayCompleted(dayNumber: number) {
      const completed = this.getCompletedDays();
      return completed.includes(dayNumber);
    },

    // Mark a day as completed
    markDayCompleted(dayNumber: number) {
      try {
        const completed = this.getCompletedDays();
        if (!completed.includes(dayNumber)) {
          completed.push(dayNumber);
          completed.sort((a: number, b: number) => a - b);
          localStorage.setItem(this.STORAGE_KEY, JSON.stringify(completed));
          this.updateUI();
          this.triggerConfetti();
          return true;
        }
        return false;
      } catch (error) {
        console.error('Error saving completed day to localStorage:', error);
        return false;
      }
    },

    // Mark a day as not completed
    markDayIncomplete(dayNumber: number) {
      try {
        const completed = this.getCompletedDays();
        const index = completed.indexOf(dayNumber);
        if (index > -1) {
          completed.splice(index, 1);
          localStorage.setItem(this.STORAGE_KEY, JSON.stringify(completed));
          this.updateUI();
          return true;
        }
        return false;
      } catch (error) {
        console.error('Error removing completed day from localStorage:', error);
        return false;
      }
    },

    // Toggle completion status
    toggleDayCompletion(dayNumber: number) {
      return this.isDayCompleted(dayNumber)
        ? this.markDayIncomplete(dayNumber)
        : this.markDayCompleted(dayNumber);
    },

    // Get completion statistics
    getStats() {
      const completed = this.getCompletedDays();
      return {
        completed: completed.length,
        total: 30,
        percentage: Math.round((completed.length / 30) * 100),
      };
    },

    // Update UI elements with completion status
    updateUI() {
      // Update day cards in calendar
      document.querySelectorAll('[data-day-card]').forEach((card) => {
        const htmlCard = card as HTMLElement;
        const dayNumber = parseInt(htmlCard.dataset.dayCard || '0');
        const isCompleted = this.isDayCompleted(dayNumber);

        // Toggle completed class
        if (isCompleted) {
          card.classList.add('ring-2', 'ring-green-400', 'bg-green-50');
          // Apply opacity to day-card-content child
          const content = card.querySelector('.day-card-content');
          if (content) {
            content.classList.add('opacity-75');
          }
        } else {
          card.classList.remove('ring-2', 'ring-green-400', 'bg-green-50');
          const content = card.querySelector('.day-card-content');
          if (content) {
            content.classList.remove('opacity-75');
          }
        }

        // Update completion indicator
        const indicator = card.querySelector('[data-completion-indicator]') as HTMLElement;
        const time = card.querySelector('[data-completion-time]') as HTMLElement;
        if (indicator && time) {
          indicator.style.display = isCompleted ? 'block' : 'none';
          time.style.display = isCompleted ? 'none' : 'block';
        }
      });

      // Update mark as done button
      const markDoneBtn = document.querySelector('[data-mark-done-btn]') as HTMLElement;
      if (markDoneBtn) {
        const dayNumber = parseInt(markDoneBtn.dataset.dayNumber || '0');
        const isCompleted = this.isDayCompleted(dayNumber);

        if (isCompleted) {
          markDoneBtn.classList.add('bg-green-600', 'hover:bg-green-700');
          markDoneBtn.classList.remove('bg-rose-600', 'hover:bg-rose-700');
        } else {
          markDoneBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
          markDoneBtn.classList.add('bg-rose-600', 'hover:bg-rose-700');
        }

        markDoneBtn.innerHTML = isCompleted ? 'Completed!' : 'Mark as Done';
      }

      // Update completion badge in header
      const completionBadge = document.querySelector('[data-completion-badge]') as HTMLElement;
      if (completionBadge) {
        const dayNumber = parseInt(completionBadge.dataset.dayNumber || '0');
        const isCompleted = this.isDayCompleted(dayNumber);

        completionBadge.style.display = isCompleted ? 'inline-flex' : 'none';
      }
    },

    // Trigger confetti animation
    triggerConfetti() {
      if (typeof confetti !== 'undefined') {
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 },
          colors: ['#f43f5e', '#ec4899', '#f97316', '#eab308', '#22c55e'],
        });

        // Second burst with different timing
        setTimeout(() => {
          confetti({
            particleCount: 50,
            angle: 60,
            spread: 55,
            origin: { x: 0 },
            colors: ['#f43f5e', '#ec4899', '#f97316', '#eab308', '#22c55e'],
          });
        }, 250);

        // Third burst from right
        setTimeout(() => {
          confetti({
            particleCount: 50,
            angle: 120,
            spread: 55,
            origin: { x: 1 },
            colors: ['#f43f5e', '#ec4899', '#f97316', '#eab308', '#22c55e'],
          });
        }, 400);
      }
    },
  };

  // Initialize UI
  function initializeUI() {
    window.completionTracker.updateUI();
  }

  // Handle initial page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeUI);
  } else {
    initializeUI();
  }

  // Handle Astro page transitions
  document.addEventListener('astro:after-swap', initializeUI);
</script>
